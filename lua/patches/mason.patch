From 9a161c8ad1bee27b9909af494a4c5568856983cc Mon Sep 17 00:00:00 2001
From: William Boman <william@redwill.se>
Date: Sun, 21 Jan 2024 18:41:09 +0100
Subject: [PATCH] feat: prioritize vim.g.python3_host_prog in python resolution

This change makes vim.g.python3_host_prog the first priority when resolving
python executables, while maintaining the existing candidates as fallback.
---
 lua/mason-core/installer/managers/pypi.lua | 30 ++++++++++++++++++++---
 1 file changed, 27 insertions(+), 3 deletions(-)

diff --git a/lua/mason-core/installer/managers/pypi.lua b/lua/mason-core/installer/managers/pypi.lua
index 7c0e5bb90..0f3de1fb5 100644
--- a/lua/mason-core/installer/managers/pypi.lua
+++ b/lua/mason-core/installer/managers/pypi.lua
@@ -15,12 +15,36 @@ local M = {}
 
 ---@async
 ---@param candidates string[]
 local function resolve_python3(candidates)
     local is_executable = _.compose(_.equals(1), vim.fn.executable)
     a.scheduler()
 
-    local available_candidates = _.filter(is_executable, candidates)
-    for __, candidate in ipairs(available_candidates) do
+    -- First priority: vim.g.python3_host_prog
+    local g_python3 = vim.g.python3_host_prog
+    if type(g_python3) == "string" and is_executable(g_python3) then
+        ---@type string
+        local version_output = spawn[g_python3]({ "--version" }):map(_.prop "stdout"):get_or_else ""
+        local ok, version = pcall(semver.new, version_output:match "Python (3%.%d+.%d+)")
+        if ok then
+            return { executable = g_python3, version = version }
+        end
+    end
+
+    -- Fallback: use candidates list
+    local available_candidates = _.filter(is_executable, candidates)
+    for __, candidate in ipairs(available_candidates) do
         ---@type string
         local version_output = spawn[candidate]({ "--version" }):map(_.prop "stdout"):get_or_else ""
         local ok, version = pcall(semver.new, version_output:match "Python (3%.%d+.%d+)")
         if ok then
             return { executable = candidate, version = version }
         end
     end
+
+    return nil
 end